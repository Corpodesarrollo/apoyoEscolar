--TRIGGERS QUE SE EJECUTAN AL EFECTUARSE EXITOSAMENTE LAS TRANSACCIONES DESDE LA APLICACION DE MATRICULAS   
--TODOS SON DE TIPO AFTER. NO SE UTILIZA NINGUNO BEFORE PORQUE LAS REGLAS DE ATHENEA TECNOLOGIA ASI LO DISPUSIERON  

--PARA LA INSERCION DE INSTITUCION   
CREATE OR REPLACE TRIGGER TRG_insertInstitucion AFTER INSERT ON INSTITUCION
	FOR EACH ROW
	BEGIN
		--dane12 IN NUMERIC,
		--dane11 IN NUMERIC,
		--localidad IN NUMERIC,
		--nombre IN VARCHAR,
		--estado IN VARCHAR,
		--tipo IN VARCHAR,
		--zona IN VARCHAR,
		--direccion IN VARCHAR
		Pk_Integracion_Mat_Apoyo.insertColegio(
		:NEW.IN_DANE_DOCE, 
		:NEW.IN_CODI_ID, 
		:NEW.LC_CODI_ID, 
		:NEW.IN_NOMB, 
		:NEW.IN_ESTA,
		:NEW.IN_TIPO,
		:NEW.TN_CODI_ID,
		:NEW.IN_DIRE_COMP
		);
	END;
/


--PARA LA ACTUALIZACION DE INSTITUCION   
CREATE OR REPLACE TRIGGER TRG_updateInstitucion AFTER UPDATE OF IN_CODI_ID,LC_CODI_ID,IN_NOMB,IN_ESTA,IN_TIPO,TN_CODI_ID,IN_DIRE_COMP  ON INSTITUCION
	FOR EACH ROW
	BEGIN
		--dane12Old IN NUMERIC,
		--dane11Old IN NUMERIC,
		--dane12New IN NUMERIC,
		--dane11New IN NUMERIC,
		--codigo IN NUMERIC,
		--localidad IN NUMERIC,
		--nombre IN VARCHAR,
		--estado IN VARCHAR,
		--tipo IN VARCHAR,
		--numeroR IN VARCHAR,
		--fechaR IN VARCHAR
		Pk_Integracion_Mat_Apoyo.updateColegio(
		:OLD.IN_DANE_DOCE, 
		:OLD.IN_CODI_ID, 
		:NEW.IN_DANE_DOCE, 
		:NEW.IN_CODI_ID, 
		:NEW.LC_CODI_ID, 
		:NEW.IN_NOMB, 
		:NEW.IN_ESTA,
		:NEW.IN_TIPO,
		:NEW.TN_CODI_ID,
		:NEW.IN_DIRE_COMP
		);
	END;
/

--PARA LA ELIMINACION DE INSTITUCION   
CREATE OR REPLACE TRIGGER TRG_deleteInstitucion AFTER DELETE ON INSTITUCION
	FOR EACH ROW
	BEGIN
		--dane12Old IN NUMERIC,
		--dane11Old IN NUMERIC,
		Pk_Integracion_Mat_Apoyo.deleteColegio(
		:OLD.IN_DANE_DOCE, 
		:OLD.IN_CODI_ID 
		);
	END;
/

--PARA LA INSERCION DE SEDE   
CREATE OR REPLACE TRIGGER TRG_insertSede AFTER INSERT ON INST_SEDE
	FOR EACH ROW
	BEGIN
		--daneColegio IN NUMERIC,
		--daneSede IN NUMERIC,
		--codigo IN NUMERIC,
		--nombre IN VARCHAR,
		--direccion IN VARCHAR,
		--telefono IN VARCHAR,
		--estado IN NUMERIC
		Pk_Integracion_Mat_Apoyo.insertSede(
			:NEW.IN_CODI_ID,
			:NEW.IS_DANE_SEDE,
			CASE LENGTH(:NEW.IS_CONS_SEDE) WHEN 12 THEN (TO_NUMBER(SUBSTR(LPAD(:NEW.IS_CONS_SEDE,12,0),12,1))) WHEN 13 THEN (TO_NUMBER(SUBSTR(LPAD(:NEW.IS_CONS_SEDE,13,0),12,2))) END,
			:NEW.IS_NOMB,
			:NEW.IS_DIRE_SEDE, 
			:NEW.IS_TELE_SEDE, 
			:NEW.IS_ESTA_SEDE 
		);
	END;
/


--PARA LA ACTUALIZACION DE LA SEDE    
CREATE OR REPLACE TRIGGER TRG_updateSede AFTER UPDATE OF IN_CODI_ID,IS_DANE_SEDE,IS_CONS_SEDE,IS_NOMB,IS_ESTA_SEDE,IS_DIRE_SEDE,IS_TELE_SEDE ON INST_SEDE
   FOR EACH ROW
   BEGIN
			--daneColegioOld IN NUMERIC,
			--daneColegioNew IN NUMERIC,
			--daneSedeOld IN NUMERIC,
			--daneSedeNew IN NUMERIC,
			--codigoOld IN NUMERIC,
			--codigoNew IN NUMERIC,
			--nombre IN VARCHAR,
			--direccion IN VARCHAR,
			--telefono IN VARCHAR,
			--estado IN NUMERIC	
			Pk_Integracion_Mat_Apoyo.updateSede(
				:OLD.IN_CODI_ID,
				:NEW.IN_CODI_ID,
				:OLD.IS_DANE_SEDE,
				:NEW.IS_DANE_SEDE,
				CASE LENGTH(:OLD.IS_CONS_SEDE) WHEN 12 THEN (TO_NUMBER(SUBSTR(LPAD(:OLD.IS_CONS_SEDE,12,0),12,1))) WHEN 13 THEN (TO_NUMBER(SUBSTR(LPAD(:OLD.IS_CONS_SEDE,13,0),12,2))) END,
				CASE LENGTH(:NEW.IS_CONS_SEDE) WHEN 12 THEN (TO_NUMBER(SUBSTR(LPAD(:NEW.IS_CONS_SEDE,12,0),12,1))) WHEN 13 THEN (TO_NUMBER(SUBSTR(LPAD(:NEW.IS_CONS_SEDE,13,0),12,2))) END,
				:NEW.IS_NOMB,
				:NEW.IS_DIRE_SEDE, 
				:NEW.IS_TELE_SEDE, 
				:NEW.IS_ESTA_SEDE		 
			);
	   END;
/

--PARA LA ELIMINACION DE SEDE   
CREATE OR REPLACE TRIGGER TRG_deleteSede AFTER DELETE ON INST_SEDE
	FOR EACH ROW
	BEGIN
		--deleteSede(
		--daneColegioOld IN NUMERIC,
		--daneSedeOld IN NUMERIC,
		--codigoColegioOld IN NUMERIC,
		Pk_Integracion_Mat_Apoyo.deleteSede(
			:OLD.IN_CODI_ID,
			:OLD.IS_DANE_SEDE,
			CASE LENGTH(:OLD.IS_CONS_SEDE) WHEN 12 THEN (TO_NUMBER(SUBSTR(LPAD(:OLD.IS_CONS_SEDE,12,0),12,1))) WHEN 13 THEN (TO_NUMBER(SUBSTR(LPAD(:OLD.IS_CONS_SEDE,13,0),12,2))) END
		);
	END;
/


--validados hacia arriba 
---PARA EL INGRESO DE UN ALUMNO      
CREATE OR REPLACE TRIGGER TRG_insertAlumno AFTER INSERT ON ALUMNO
	FOR EACH ROW
	BEGIN
		Pk_Integracion_Mat_Apoyo.insertAlumno2(
		:NEW.AL_CODI_ID,:NEW.AL_AO_ESTA,
		:NEW.IN_CODI_ID,
		:NEW.JR_CODI_ID,
		NVL(:NEW.GR_CODI_ID,-9),
		NVL(:NEW.GP_CODI_ID,0),
		TO_NUMBER(NVL(:NEW.DD_CODI_ID_EXPU,'-9')), 
		TO_NUMBER(NVL(:NEW.DM_CODI_ID_EXPU,'-9')),
		:NEW.TI_CODI_ID,
		:NEW.AL_NUME_ID,
		:NEW.AL_PRIM_APEL,
		:NEW.AL_SEGU_APEL,
		:NEW.AL_PRIM_NOMB,
		:NEW.AL_SEGU_NOMB,
		:NEW.ES_CODI_ID,
		(CASE UPPER(:NEW.AL_GENE) WHEN 'M' THEN 1 ELSE 2 END),
		TO_CHAR(:NEW.AL_FECH_NACI,'dd/mm/yyyy'),
		TO_NUMBER(NVL(:NEW.DD_CODI_ID_NACE,'-9')), 
		TO_NUMBER(NVL(:NEW.DM_CODI_ID_NACE,'-9')));
	END;
/


---PARA LA ACUTALIZACION DE LA UBICACION DEL ALUMNO        
CREATE OR REPLACE TRIGGER TRG_updateUbicacionAlumno AFTER UPDATE OF
IN_CODI_ID,
JR_CODI_ID,
GR_CODI_ID,
GP_CODI_ID
ON ALUMNO
	FOR EACH ROW
	BEGIN
		Pk_Integracion_Mat_Apoyo.updateAlumno2(
		:NEW.AL_CODI_ID,:NEW.AL_AO_ESTA,
		:NEW.IN_CODI_ID,
		:NEW.JR_CODI_ID,
		NVL(:NEW.GR_CODI_ID,-9),
		NVL(:NEW.GP_CODI_ID,0),
		:NEW.TI_CODI_ID,
		:NEW.AL_NUME_ID,
		:NEW.ES_CODI_ID,
		:OLD.IN_CODI_ID,
		:OLD.JR_CODI_ID,
		NVL(:OLD.GR_CODI_ID,-9),
		NVL(:OLD.GP_CODI_ID,0));
	END;
/

-- PARA LA ACTUALIZACION DEL TIPO Y  / O NUMERO DE DOCUMENTO DEL ESTUDIANTE    
CREATE OR REPLACE TRIGGER TRG_updateIdAlumno AFTER UPDATE OF
AL_PRIM_APEL,
AL_SEGU_APEL,
AL_PRIM_NOMB,
AL_SEGU_NOMB,
DD_CODI_ID_EXPU,
DM_CODI_ID_EXPU,
AL_GENE
ON ALUMNO
	FOR EACH ROW
	BEGIN
		Pk_Integracion_Mat_Apoyo.updateIdAlumno2(
		:NEW.AL_CODI_ID,
		:NEW.AL_AO_ESTA,
		:NEW.TI_CODI_ID,
		:NEW.AL_NUME_ID,
		:NEW.AL_PRIM_APEL,
		:NEW.AL_SEGU_APEL,
		:NEW.AL_PRIM_NOMB,
		:NEW.AL_SEGU_NOMB,
		:NEW.ES_CODI_ID,
		TO_NUMBER(NVL(:NEW.DD_CODI_ID_EXPU,'0')),
		TO_NUMBER(NVL(:NEW.DM_CODI_ID_EXPU,'0')),
		(CASE UPPER(:NEW.AL_GENE) WHEN 'M' THEN 1 ELSE 2 END)
		);
		
	END;
/



